import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class SubstitutionCipher {
	
    /**
     * Private constants used to shift characters for the substitution cipher.
     */
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";

    /**
     * Constructs a new String where each letter in the String input is shifted
     * by the amount shift to the right, preserving whether the original
     * character was uppercase or lowercase. For example, the String "ABC" with
     * shift 3 would cause this method to return "DEF". A negative value should
     * shift to the left. For example, the String "ABC" with shift -3 would
     * cause this method to return "XYZ". Punctuation, numbers, whitespace and
     * other non-letter characters should be left unchanged. NOTE: For full
     * credit you are REQUIRED to use a StringBuilder to build the String in
     * this method rather than using String concatenation.
     *
     * @param input
     *            String to be encrypted
     * @param shift
     *            Amount to shift each character of input to the right
     * @return the encrypted String as outlined above
     */
    public static String shift(String input, int shift) {
        StringBuilder sb = new StringBuilder(input.length());
        
        //Loops through each character of the string and shifts them
        for (int i = 0; i < input.length(); i++) {
           char temp = input.charAt(i);
           if (Character.isLetter(temp) && Character.isUpperCase(temp)) {
               int index = UPPERCASE.indexOf(temp);
               int newIndex = (index + shift + 26) % 26;
               char letter = UPPERCASE.charAt(newIndex);
               sb.append(letter);
           }
           else if (Character.isLetter(temp) && Character.isLowerCase(temp)) {
               int index = LOWERCASE.indexOf(temp);
               int newIndex = (index + shift + 26) % 26;
               char letter = LOWERCASE.charAt(newIndex);
               sb.append(letter);
           }
              
           else {
              sb.append(temp);
           }
        }
        
        return sb.toString();
    }

    /**
     * Displays the message "promptMsg" to the user and reads the next full line
     * that the user enters. If the user enters an empty string, reports the
     * error message "ERROR! Empty Input Not Allowed!" and then loops,
     * repeatedly prompting them with "promptMsg" to enter a new string until
     * the user enters a non-empty String
     *
     * @param in
     *            Scanner to read user input from
     * @param promptMsg
     *            Message to display to user to prompt them for input
     * @return the String entered by the user
     */
    public static String promptForString(Scanner in, String promptMsg) {
       //Displays prompt message
        System.out.print(promptMsg);
        
        //Reads input from user
        String s = in.nextLine();
        
        //Checks if input is empty
        while (s.length() < 1) {
            System.out.println("ERROR! Empty Input Not Allowed!");
            //Loops again
            System.out.print(promptMsg);
            s = in.nextLine();
        }
        return s;
    }

    /**
     * Opens the file inFile for reading and the file outFile for writing,
     * reading one line at a time from inFile, shifting it the number of
     * characters given by "shift" and writing that line to outFile. If an
     * exception occurs, must report the error message: "ERROR! File inFile not
     * found or cannot write to outFile" where "inFile" and "outFile" are the
     * filenames given as parameters.
     *
     * @param inFile
     *            the file to be transformed
     * @param outFile
     *            the file to write the transformed output to
     * @param shift
     *            the amount to shift the characters from inFile by
     * @return false if an exception occurs and the error message is written,
     *         otherwise true
     */
    public static boolean transformFile(String inFile, String outFile,
            int shift) {
        try {
            File file = new File(inFile);
            Scanner fileReader = new Scanner(file);
            PrintWriter pWriter = new PrintWriter(outFile);

            //Reads each line of the input file
            while (fileReader.hasNext()) {                 
               String text = fileReader.nextLine();
               
               //Shifts the text
               String shiftedText = shift(text, shift);
               
               //Writes shifted text into output file
               pWriter.println(shiftedText);
               }
               
            fileReader.close();
            pWriter.close();
            return true;
        }
        
        catch (FileNotFoundException e) {
           System.out.println("ERROR! File inFile not found or cannot write to outFile");
           return false;
        }

    }

    /**
     * Prompts the user to enter a single character choice. The only allowable
     * values are 'E', 'D' or 'Q'. All other values are invalid, including all
     * values longer than one character in length, however the user is allowed
     * to enter values in either lower or upper case. If the user enters an
     * invalid value, the method displays the error message "ERROR! Enter a
     * valid value!" and then prompts the user repeatedly until a valid value is
     * entered. Returns a single uppercase character representing the user's
     * choice.
     *
     * @param in
     *            Scanner to read user choices from
     * @return the user's choice as an uppercase character
     */
    public static char getChoice(Scanner in) {
       //Reads input from user
         String choice = in.nextLine();
        
        //Check if the input length is not equal to 1 or if the entered character is not 'E', 'D', or 'Q'
         while (choice.length() != 1 && (Character.toUpperCase(choice.charAt(0)) != 'E' || Character.toUpperCase(choice.charAt(0)) != 'D' || Character.toUpperCase(choice.charAt(0)) != 'Q')) {
           System.out.println("ERROR! Enter a valid value! \n");
           
           //Prompts user to input again
           choice = in.nextLine();  
         }
         //Convert the first character of the input to uppercase and return it
         char c = Character.toUpperCase(choice.charAt(0));
         return c;
    }

    /**
     * Displays the menu of choices to the user.
     */
    public static void displayMenu() {
        System.out.println("[E]ncode a file");
        System.out.println("[D]ecode a file");
        System.out.println("[Q]uit");
    }
    
    public static void askFile(Scanner in, String inFile, String outFile, int shift, char choice) {
       //Prompts user for input file
      inFile = promptForString(in, "Enter an input file: ");
      
      //Prompts user for output file
      outFile = promptForString(in, "Enter an output file: ");
      
      //Prompts user for shift amount
      shift = Integer.parseInt(promptForString(in, "Enter a shift amount: "));
      
      //Encrypts
      if (choice == 'E'){
         transformFile(inFile, outFile, shift);
      }
      //Decrypts
      else if (choice=='D'){
         transformFile(inFile, outFile, shift * -1);
      }
    }
    
    public static char promptForChoice(char choice, Scanner in) {
       displayMenu();
       
       //Prompts user for choice
       System.out.print("Enter your choice: ");
       choice = getChoice(in);
       return choice;
    }
       

    public static void main(String[] args) {
      Scanner in = new Scanner(System.in);
      displayMenu();
      
      //Prompts user for their choice
      System.out.print("Enter your choice: ");
      char choice = getChoice(in);

      String inFile = "A";
      String outFile = "A";
      int shift = 0;

      //Process user choices until they choose to quit
      while (choice != 'Q') {
        
           askFile(in, inFile, outFile, shift, choice);
           System.out.println("Finished writing to file.\n");
           choice = promptForChoice(choice, in);
      }
      System.out.println();
      System.out.println("Goodbye!");
      in.close();
    }


}
